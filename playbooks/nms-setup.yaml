---
- name: NMS configuration
  hosts: SD-HQ-NMS
  gather_facts: no # localhoston fut, úgyhogy nem kell.
  become: no # Alapból a futtató felhasználóval (nálunk ez solaire) futtatjuk a taskokat, ahol root kell ott expliciten megadjuk
  vars:
    # Globális változók, frissítések esetén kell ezeket változtatni
    # Itt frissíthető:
    nessus_download_url: "https://www.tenable.com/downloads/api/v2/pages/nessus/files/Nessus-10.8.3-debian10_amd64.deb"
    # Itt található újabb link:
    zabbix_release_url: "https://repo.zabbix.com/zabbix/7.2/release/debian/pool/main/z/zabbix-release/zabbix-release_latest_7.2+debian12_all.deb"
    # Ezt manuálisan érdemes ellenőrizni, hogy mi töltődött le a repo-ból
    postgresql_version: "15"


  tasks:
    # --- SSH Key Management configuration ---
    - name: Check if SSH key pair already exists
      stat:
        path: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"
      register: ssh_key_status

    - name: Generate SSH key pair if not present
      openssh_keypair:
        path: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"
        type: rsa
        size: 2048
        mode: '0600'
      when: not ssh_key_status.stat.exists
      register: ssh_keypair_result
      notify: Display public key content

    - name: Display public key content
      debug:
        msg: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/id_rsa.pub') }}"
      when: ssh_keypair_result is changed

    # --- Essential Packages Installation ---
    - name: Install essential packages
      become: yes
      apt:
        name:
          - sudo
          - pip
        state: present

    # --- Nessus Installation ---
    - name: Check if nessus is installed
      command: dpkg-query -W nessus
      register: nessus_check_deb
      failed_when: nessus_check_deb.rc > 1
      changed_when: nessus_check_deb.rc == 1

    - name: Download nessus
      get_url: 
        url="{{ nessus_download_url }}"
        dest="{{ lookup('env', 'HOME') }}/nessus.deb"
      when: nessus_check_deb.rc == 1

    - name: Install nessus
      apt:
        deb: "{{ lookup('env', 'HOME') }}/nessus.deb"
      become: yes
      when: nessus_check_deb.rc == 1
      notify: Enable and start nessus

    # --- PostgreSQL Installation and Configuration ---
    - name: Install PostgreSQL
      become: yes
      apt:
        name: postgresql
        state: present

    - name: Check if PostgreSQL is installed
      command: dpkg-query -W postgresql
      register: postgresql_check
      failed_when: postgresql_check.rc > 1
      changed_when: postgresql_check.rc == 1

    - name: Configure PostgreSQL to use trust authentication for localhost and zabbix user
      become: yes
      blockinfile:
        path: /etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf
        block: |
          local   all             postgres                                trust
          local   all             zabbix                                  trust
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        state: present
      notify: Restart PostgreSQL

    - name: Start PostgreSQL
      become: yes
      service:
        name: postgresql
        state: started

    - name: Enable PostgreSQL
      become: yes
      service:
        name: postgresql
        enabled: yes
      when: postgresql_check.rc == 0

    # --- Zabbix repo configuration
    - name: Check if Zabbix is installed
      command: dpkg-query -W zabbix-server-pgsql
      register: zabbix_check_deb
      failed_when: zabbix_check_deb.rc > 1
      changed_when: zabbix_check_deb.rc == 1

    - name: Download Zabbix release package
      become: yes
      get_url:
        url: "{{ zabbix_release_url }}"
        dest: "/tmp/zabbix-release.deb"
      when: zabbix_check_deb.rc == 1

    - name: Install Zabbix release package
      become: yes
      apt:
        deb: "/tmp/zabbix-release.deb"
      when: zabbix_check_deb.rc == 1

    - name: Update APT package cache
      become: yes
      apt:
        update_cache: yes
      when: zabbix_check_deb.rc == 1

    # --- Zabbix Installation ---
    - name: Install Zabbix server, frontend, and agent
      become: yes
      apt:
        name:
          - zabbix-server-pgsql
          - zabbix-frontend-php
          - zabbix-nginx-conf
          - zabbix-agent
          - zabbix-sql-scripts
        state: present

    # --- Zabbix Database Configuration ---

    # !!! We need to install: pip install psycopg2-binary
    - name: Create Zabbix server database
      become: yes
      postgresql_db:
        name: zabbix
        encoding: UTF8
        lc_collate: en_US.UTF-8
        lc_ctype: en_US.UTF-8
      register: zabbix_db_creation

    - name: Create Zabbix database user
      become: yes
      postgresql_user:
        name: zabbix
        password: zabbix_password
        db: zabbix
        role_attr_flags: CREATEDB

    - name: Grant all privileges on zabbix database to zabbix user
      become: yes
      postgresql_privs:
        db: zabbix
        type: database
        privs: ALL
        role: zabbix
        state: present

    - name: Check if Zabbix schema is in the database
      become: yes
      postgresql_query:
        db: zabbix
        query: "SELECT to_regclass('public.users');"
      register: zabbix_users_table_check

      # Ez csak akkor fut le, ha még nincs meg a Zabbix séma
    - name: Import initial schema and data
      become: yes
      command: "zcat /usr/share/zabbix/sql-scripts/postgresql/server.sql.gz | sudo -u zabbix psql zabbix"
      when: zabbix_users_table_check.query is not defined
      environment:
        PGPASSWORD: zabbix_password

    - name: Configure Zabbix server to use PostgreSQL
      become: yes
      lineinfile:
        path: /etc/zabbix/zabbix_server.conf
        regexp: '^# DBPassword='
        line: 'DBPassword=zabbix_password'

    # --- NGINX Configuration for Zabbix ---
    - name: Configure NGINX for Zabbix frontend
      become: yes
      lineinfile:
        path: /etc/zabbix/nginx.conf
        regexp: '^#listen 80;'
        line: 'listen 80;'
        state: present

    - name: Enable and start NGINX
      become: yes
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Enable and start Zabbix server and agent
      become: yes
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - zabbix-server
        - zabbix-agent

  handlers:
    - name: Display public key content
      debug:
        msg: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/id_rsa.pub') }}"

    - name: Enable and start nessus
      service:
        name: nessusd
        enabled: yes
        state: started

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted
